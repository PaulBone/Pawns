Pawns: a declarative/imperative language
(Pointer Assignment Without Nasty Surprises)
Version: 1.150815
Initial development by Lee Naish

Pawns home page:
http://people.eng.unimelb.edu.au/lee/src/pawns/
(or tinyurl.com/pawns-lang)

This has links to:

An informal introduction to the language (not necessarily up to date,
or presented particularly well, and the syntax is not what is supported -
see note below).

Also a paper on the sharing analysis done in the compiler (the src version
here is less up to date than the paper and has several known bugs, meaning
you can write dodgey code and the compiler won't complain as it should).

The system is also not packaged well currently.

It needs

1) SWI-Prolog:
sudo apt-get install swi-prolog-nox

2) Boehm++ garbage collector:
sudo apt-get install libgc-dev

3) adtpp/adt4c tool installed in ~/bin/adtpp:
sudo apt-get install git
git clone https://github.com/cjack/Adt4c
cd Adt4c/src
make install
(a more up to date version is at
https://bitbucket.org/Macnaa/adt4c-with-polymorphism.git)

4) pawns.h in current dir

5) gcc (other C compilers should be ok also)

--------------------------------------------------------------

We currently have

compiler: source for compiler

examples: example Pawns code (with makefile and other files needed etc)

bench: some benchmarks (binary tree insertion...) in various languages

--------------------------------------------------------------

Note re syntax

People have always argued way too much about the syntax of programming
languages, at the expense of semantics, which is the important thing.
What was that Phil Wadler quote...?  There are two things I have done
which may counter this trend for Pawns.  First, the papers written so far
have used a fake syntax based on Haskell.  Second, I think we can *all*
agree that the actual supported syntax is awful.  It was chosen to make
the implementation easy - I had better things to do than write a parser
(which would also require more serious thoughts about syntax) so I just
used Prolog syntax with a bunch of operators declared and used 'read'
in Prolog to do all the parsing.  This means various things need to be
terminated with '.', the Prolog tokeniser is used, and various things
need parentheses or braces.  I have not properly described the syntax -
best look at examples for now.  However, none of this is set in stone.
The start of a Pawns source code file, up to the first blank line,
is ignored as far as code is concerned.  It can be used for a #! line,
meta-data, directives etc.  These could include a directive to say what
syntax is used in the rest of the file.  Currently its just ignored,
so best make sure you start with a block of comments or al least a blank
line, or your first bit of code will mysteriously get ignored.

