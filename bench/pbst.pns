% bst stuff: conversion from list of ints to bst of ints
% pure version (see bst.pns for destructive update version)

import from bstmain.
import print_int from io.

main :: void -> void
    implicit rw io.
main(v) = !bstmain(v).

type bst ---> mt ; node(bst, int, bst).
type ints = list(int).

% convert list to bst
list_bst :: ints -> bst.
list_bst(xs) = list_bst_acc(xs, mt).

% add list of ints to tree and return new tree
% accumulator version used so order of insertion is L-R
list_bst_acc :: ints -> bst -> bst.
list_bst_acc(xs, t0) = {
    cases xs of {
    case cons(x, xs1):
        list_bst_acc(xs1, bst_insert(x, t0))
    case nil:
        t0
    }
}.

% insert by constructing new path
bst_insert :: int -> bst -> bst.
%     sharing bst_insert_du(x, t0) = t
%     pre nosharing
%     post t1 = t. % int keys don't share
bst_insert(x, t0) = {
    cases t0 of {
    case mt:
        node(mt, x, mt)
    case node(l, n, r):
        if x <= n then
            node(bst_insert(x, l), n, r)
        else
            node(l, n, bst_insert(x, r))
    }
}.
