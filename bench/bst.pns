% bst stuff: conversion from list of ints to bst of ints destructively,

import from bstmain.
import print_int from io.

main :: void -> void
    implicit rw io.
main(v) = !bstmain(v).

type bst ---> mt ; node(bst, int, bst).
type ints = list(int).
type rbst = ref(bst).

% convert list to bst - note this appears "pure" to callers
list_bst :: ints -> bst.
list_bst(xs) = {
    *tp = mt;
    list_bst_du(xs, !tp);
    return(*tp)
}.

% destructively add list of ints to tree we have ptr to
list_bst_du :: ints -> rbst -> void
    sharing list_bst_du(xs, !tp) = v
    pre xs = abstract
    post nosharing.
list_bst_du(xs, tp) = {
    cases xs of {
    case cons(x, xs1):
        bst_insert_du(x, !tp);
        list_bst_du(xs1, !tp)
    case nil:
        void
    }
}.

% destructively add int to tree we have ptr to
% - traverse down to leaf and clobber it (while loop would be nice)
bst_insert_du :: int -> rbst -> void
    sharing bst_insert_du(x, !tp) = v
    pre nosharing
    post nosharing.
bst_insert_du(x, tp) = {
    cases *tp of {
    case mt:
        *!tp := node(mt, x, mt)
    case node(*lp, n, *rp):
        % see how much malloc slows things
        % tmp = node(mt, x, mt);
        if x <= n then
            bst_insert_du(x, !lp) !tp
        else
            bst_insert_du(x, !rp) !tp
    }
}.
